#!/bin/sh

copy_to_clipboard () {
  if [[ -z "$XDG_SESSION_TYPE" ]]; then
    SESSION_TYPE=$(loginctl show-session "$(loginctl | grep $(whoami) | awk '{ print $1 }')" -p Type --value)
  else
    SESSION_TYPE="$XDG_SESSION_TYPE"
  fi

  if [[ "$SESSION_TYPE" == "wayland" ]]; then
    echo -n "$1" | wl-copy
  else
    echo -n "$1" | xclip -r -selection clipboard
  fi
}

usage () {
  cat << EOF
<u>Usage (in rofi's or dmenu's input bar)</u>:
  COMMAND [WORD]

<u>Commands</u>:
  <b><i>abr</i></b>, <b><i>abbreviations &lt;word&gt;</i></b>
    Get what &lt;word&gt; might stand for from abbreviations.com.

  <b><i>ant</i></b>, <b><i>antonyms &lt;word&gt;</i></b>
    Get antonyms for &lt;word&gt; from bighugelabs.com.

  <b><i>def</i></b>, <b><i>define &lt;word&gt;</i></b>
    Get definitions for &lt;word&gt; from wordnik.com if correctly spelled, otherwise display spell suggestions.

  <b><i>pro</i></b>, <b><i>pronounce &lt;word&gt;</i></b>
    Play pronunciation of &lt;word&gt; from wordnik.com and dictionaryapi.dev.

  <b><i>spl</i></b>, <b><i>spell &lt;word&gt;</i></b>
    Get spell suggestions for &lt;word&gt; from wordlist if not spelled correctly, otherwise display a message indicating that &lt;word&gt; is spelled correctly.

  <b><i>syn</i></b>, <b><i>synonyms &lt;word&gt;</i></b>
    Get synonyms for &lt;word&gt; from bighugelabs.com.

  <b><i>help</i></b>
    Display this help message
EOF
}

get_abbreviations () {
  ABBREVIATIONS=$(et -abr "$1")
  echo -en "\0message\x1f<b><i>What \"$1\" might stand for:</i></b>\n"
  echo "$ABBREVIATIONS"
}

get_antonyms () {
  ANTONYMS=$(et -ant "$1")
  echo -en "\0message\x1f<b><i>Antonyms for \"$1\":</i></b>\n"
  echo "$ANTONYMS"
}

define () {
  spell $1 0

  DEFINITIONS=$(et -def "$1")
  echo -en "\0message\x1f<b><i>Definitions for \"$1\":</i></b>\n"
  echo "$DEFINITIONS"
}

pronounce () {
  WORD="$1"

  spell "$WORD" 0

  SOURCES=$(et -lst "$WORD" | sed 's/^- //')
  if [[ $(echo "$SOURCES" | wc -l) -gt 1 ]]; then
    echo -en "\0data\x1fpro|$WORD\n"

    echo -en "\0message\x1f<b><i>Choose pronunciation source/accent: </i></b>\n"
    echo "$SOURCES"
  else
    et -pro "$WORD" -src 'macmillan'

    exit 0
  fi
}

spell () {
  SUGGESTIONS=$(et -spl "$1")
  FOUND=$?
  SHOW_MESSAGE=$2
  if [ $FOUND -eq 0 ]; then
    if [ $SHOW_MESSAGE -eq 1 ]; then
      echo -en "\0markup-rows\x1ftrue\n"
      echo -en "<span foreground=\"green\">\"$1\" appears to be spelled correctly</span>\n"
    fi
  else
    echo -en '\0data\x1ftrue\n'
    echo -en '\0delim\x1f\r\n'

    echo -en "\0message\x1f<span foreground=\"red\">\"$1\" doesn't appear to be spelled correctly.</span>\n<b><i>Suggestions:</i></b>\r"

    echo "$SUGGESTIONS" | tr '\n' '\r'

    exit 1
  fi
}

get_synonyms () {
  spell $1 0

  SYNONYMS=$(et -syn "$1")
  echo -en "\0message\x1f<b><i>Synonyms for \"$1\":</i></b>\n"
  echo "$SYNONYMS"
}

if [ "$ROFI_DATA" == "true" ]; then
  echo -en '\0delim\x1f\n\r'
  echo -en '\0data\x1ffalse\n'
fi

if [ "$ROFI_RETV" == 1 ]; then
  if [[ "$(echo "$ROFI_DATA" | cut -d '|' -f 1)" == "pro" ]]; then
    SOURCE="$(echo "$@" | sed 's/ (default)$//')"
    WORD="$(echo "$ROFI_DATA" | cut -d '|' -f 2)"

    et -pro "$WORD" -src "$SOURCE"
  else
    copy_to_clipboard "$@"
    notify-send -a "rofi_et" "\"$@\" has been copied to clipboard"
  fi

  exit 0
fi

echo -en '\0message\x1f\n'

if [ "$@" ]; then
  COMMAND=$(echo "$@" | cut -d " " -f 1)
  WORD=$(echo "$@" | cut -d " " -f 2)

  if [ "$COMMAND" == "help" ]; then
    echo -en "\0markup-rows\x1ftrue\n"
    usage
  else
    SPACE_COUNT=$(echo "$@" | tr -cd " \t" | wc -c)
    if [ "$WORD" == "" ] || [ $SPACE_COUNT -lt 1 ]; then
      echo -en "\0markup-rows\x1ftrue\n"
      echo '<span foreground="red">You need to specifiy a command and a word</span>'
    else
      echo -en "\0markup-rows\x1ffalse\n"
      if [ "$COMMAND" == "abr" ] || [ "$COMMAND" == "abbreviations" ]; then
        get_abbreviations $WORD
      elif [ "$COMMAND" == "ant" ] || [ "$COMMAND" == "antonyms" ]; then
        get_antonyms $WORD
      elif [ "$COMMAND" == "def" ] || [ "$COMMAND" == "define" ]; then
        define $WORD
      elif [ "$COMMAND" == "pro" ] || [ "$COMMAND" == "pronounce" ]; then
        pronounce $WORD
      elif [ "$COMMAND" == "spl" ] || [ "$COMMAND" == "spell" ]; then
        spell $WORD 1
      elif [ "$COMMAND" == "syn" ] || [ "$COMMAND" == "synonyms" ]; then
        get_synonyms $WORD
      else
        echo -en "\0markup-rows\x1ftrue\n"
        echo "<span foreground=\"red\">Unkown command \"$COMMAND\"</span>"
      fi
    fi
  fi
fi
